---
import type { ImageMetadata } from "astro";
import type { ComponentProps } from "astro/types";
import { Picture, getImage } from "astro:assets";

type Props = Pick<
	ComponentProps<typeof Picture>,
	"width" | "height" | "priority" | "class" | "alt"
> & {
	src: ImageMetadata;
	banner?: boolean;
	content?: boolean;
	zoomable?: boolean;
};

let {
	banner,
	class: className = "rounded-lg",
	content,
	zoomable,
	...props
} = Astro.props;

const [hqImg, lqImg] = await Promise.all([
	getImage({ src: props.src, format: "webp", quality: "max" }),
	getImage({ src: props.src, format: "avif", quality: 50, width: 24 })
		.then((img) => fetch(new URL(img.src, Astro.url.origin)))
		.then((req) => req.arrayBuffer())
		.then(
			(buffer) =>
				"data:image/avif;base64," + Buffer.from(buffer).toString("base64"),
		),
]);
console.log(lqImg);

let aspectRatio: number | null = null;
if (banner) {
	aspectRatio = 1.625 / 1;
} else if (
	hqImg.options.width !== undefined &&
	hqImg.options.height !== undefined
) {
	aspectRatio = hqImg.options.width / hqImg.options.height;
}

const Element = zoomable ? "a" : "div";
---

<script>
	const onLoad = () => {
		const lazyImages = Array.from(document.querySelectorAll(".lazy-image"));
		for (const picture of lazyImages) {
			if (!(picture instanceof HTMLPictureElement)) continue;
			const img = picture.querySelector(":scope img");
			if (!(img instanceof HTMLImageElement)) continue;
			if (img.complete) {
				img.style.backgroundImage = "none";
			} else {
				img.addEventListener("load", () => {
					img.style.backgroundImage = "none";
				});
			}
		}
	};

	document.addEventListener("astro:page-load", onLoad);
	document.addEventListener("load", onLoad);
	onLoad();
</script>

<Element
	class:list={[
		"img-container rounded-lg overflow-clip relative",
		{
			"max-h-[inherit]": content,
			"banner-clip overflow-clip relative h-auto w-full": banner,
			landscape: aspectRatio != null && aspectRatio > 1,
			portrait: aspectRatio != null && aspectRatio <= 1,
		},
	]}
	style={aspectRatio != null ? `aspect-ratio: ${aspectRatio};` : undefined}
	{...zoomable
		? { href: hqImg.src, target: "_blank", rel: "noopener noreferrer" }
		: {}}
	data-astro-prefetch={false}
>
	<Picture
		class:list={[
			{
				"object-contain h-full": content,
				"object-cover h-full w-full": banner,
			},
			"backdrop-blur-2xl in-[.full-bleed]:w-auto in-[.full-bleed]:h-full text-[0px] bg-cover",
			className,
		]}
		style={"background-image: url(" + lqImg + ");"}
		densities={[1, 2]}
		formats={["avif", "webp"]}
		loading={props.priority ? "eager" : "lazy"}
		quality="high"
		pictureAttributes={{
			style: "mask: inherit;",
			class: "relative z-[2] lazy-image",
		}}
		{...props}
	/>
</Element>
