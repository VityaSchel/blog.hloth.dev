---
import type { ImageMetadata } from "astro";
import type { ComponentProps } from "astro/types";
import { Picture, getImage } from "astro:assets";

type Props = Pick<
	ComponentProps<typeof Picture>,
	"width" | "height" | "priority" | "class" | "alt"
> & {
	src: ImageMetadata;
	banner?: boolean;
	content?: boolean;
	zoomable?: boolean;
};

let {
	banner,
	class: className = "rounded-lg",
	content,
	zoomable,
	...props
} = Astro.props;

const img = await getImage({ src: props.src, format: "webp", quality: "max" });

let aspectRatio: number | null = null;
if (banner) {
	aspectRatio = 1.625 / 1;
} else if (
	img.options.width !== undefined &&
	img.options.height !== undefined
) {
	aspectRatio = img.options.width / img.options.height;
}

const Element = zoomable ? "a" : "div";
---

<Element
	class:list={[
		"img-container rounded-lg overflow-clip",
		{
			"max-h-[inherit]": content,
			"banner-clip overflow-clip relative h-auto w-full": banner,
			landscape: aspectRatio != null && aspectRatio > 1,
			portrait: aspectRatio != null && aspectRatio <= 1,
		},
	]}
	style={aspectRatio != null ? `aspect-ratio: ${aspectRatio};` : undefined}
	{...zoomable
		? { href: img.src, target: "_blank", rel: "noopener noreferrer" }
		: {}}
>
	<Picture
		class:list={[
			{
				"object-contain h-full": content,
				"object-cover h-full w-full": banner,
			},
			"backdrop-blur-2xl in-[.full-bleed]:w-auto in-[.full-bleed]:h-full",
			className,
		]}
		densities={[1, 2]}
		formats={["avif", "webp"]}
		loading={props.priority ? "eager" : "lazy"}
		quality="high"
		pictureAttributes={{
			style: "mask: inherit",
		}}
		{...props}
	/>
</Element>
